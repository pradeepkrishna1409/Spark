############################################################################################################### 
##################################################   Spark SQL  ############################################### 
case class Orders(order_id : Int,
order_date: String,
order_customer_id: Int,
order_status: String
)

val orders = sc.textFile("/loudacre/itversity/orders.txt")

val ordersDF = orders.map( rec => { 
      val r = rec.split(",")
      Orders(r(0).toInt, r(1), r(2).toInt, r(3))
      }).toDF()
	  
ordersDF.select("order_id").collect()

ordersDF.registerTempTable("orders")
sqlContext.sql("select * from orders limit 10 " ).collect().foreach(println)



case class OrderItems( order_item_id:Int,
order_item_order_id:Int,
order_item_product_id: Int,
order_item_quantity: Int,
order_item_subtotal:Double,
order_item_price:Double)


val orderitems = sc.textFile("/loudacre/itversity/order_items.txt")

val orderitemsDF= orderitems.map ( rec => {
      val a = rec.split(",")
      OrderItems(a(0).toInt , a(1).toInt , a(2).toInt , a(3).toInt , a(4).toDouble, a(5).toDouble    )
      }
      ).toDF()
	  
	  



ordersDF.select(ordersDF("order_id"),ordersDF("order_status") ).show()
ordersDF.select("order_id","order_status").show()	  
	  

ordersDF.filter(ordersDF("order_id") > 100).collect()
ordersDF.filter(ordersDF("order_status") === "CLOSED").collect()

ordersDF.where(ordersDF("order_status") === "COMPLETE").show()

ordersDF.sort(ordersDF("order_customer_id").desc).show()
